/* NonTerminals (S' not included and will be auto-configured by lcc LR1Parser) */
S
TranslationUnitDecl
Decl
FunctionDecl
ParmVarDecl
VarDecl
Stmt
Stmts
CompoundStmt
WhileStmt
IfStmt
ReturnStmt
NullStmt
DeclStmt
ValueStmt
/* Terminals (Tokens plus Expr since it's parsed by OperatorPrecedence Parser and passed to LR1Parser as a single symbol) */
Expr
AsmStmt
TOKEN_VARTYPE
TOKEN_KWVOID
TOKEN_KWIF
TOKEN_KWELSE
TOKEN_KWWHILE
TOKEN_KWRETURN
TOKEN_KWASM
TOKEN_KWEXTERN
TOKEN_IDENTIFIER
TOKEN_INTEGER
TOKEN_FLOAT
TOKEN_STRING
TOKEN_CHAR
+
++
+=
-
--
-=
~
!
!=
&
&&
&=
=
==
>
>>
>=
>>=
<
<<
<=
<<=
^
^=
|
||
|=
%
%=
*
*=
/
/=
[
]
(
)
{
}
;
.
,
:
/* Productions (S' -> %StartSymbol% not included and will be auto-generated by lcc LR1Parser) */
S -> TranslationUnitDecl
TranslationUnitDecl -> Decl
TranslationUnitDecl -> Decl TranslationUnitDecl
Decl -> FunctionDecl
FunctionDecl -> TOKEN_VARTYPE TOKEN_IDENTIFIER ( ) ;
FunctionDecl -> TOKEN_VARTYPE TOKEN_IDENTIFIER ( ParmVarDecl ) ;
ParmVarDecl -> TOKEN_VARTYPE TOKEN_IDENTIFIER
ParmVarDecl -> TOKEN_VARTYPE TOKEN_IDENTIFIER , ParmVarDecl
FunctionDecl -> TOKEN_VARTYPE TOKEN_IDENTIFIER ( ) CompoundStmt
CompoundStmt -> { }
FunctionDecl -> TOKEN_VARTYPE TOKEN_IDENTIFIER ( ParmVarDecl ) CompoundStmt
FunctionDecl -> TOKEN_KWVOID TOKEN_IDENTIFIER ( ) ;
FunctionDecl -> TOKEN_KWVOID TOKEN_IDENTIFIER ( ParmVarDecl ) ;
FunctionDecl -> TOKEN_KWVOID TOKEN_IDENTIFIER ( ) CompoundStmt
FunctionDecl -> TOKEN_KWVOID TOKEN_IDENTIFIER ( ParmVarDecl ) CompoundStmt
Decl -> VarDecl
VarDecl -> TOKEN_VARTYPE TOKEN_IDENTIFIER ;
VarDecl -> TOKEN_VARTYPE TOKEN_IDENTIFIER = Expr ;
CompoundStmt -> { Stmts }
Stmts -> Stmt
Stmts -> Stmt Stmts
Stmt -> CompoundStmt
Stmt -> WhileStmt
Stmt -> IfStmt
Stmt -> ReturnStmt
Stmt -> NullStmt
Stmt -> DeclStmt
Stmt -> ValueStmt
WhileStmt -> TOKEN_KWWHILE ( Expr ) Stmt
IfStmt -> TOKEN_KWIF ( Expr ) Stmt
IfStmt -> TOKEN_KWIF ( Expr ) Stmt TOKEN_KWELSE Stmt
ReturnStmt -> TOKEN_KWRETURN ;
ReturnStmt -> TOKEN_KWRETURN Expr ;
NullStmt -> ;
DeclStmt -> Decl
ValueStmt -> Expr ;
Stmt -> AsmStmt
FunctionDecl -> TOKEN_KWEXTERN TOKEN_STRING TOKEN_VARTYPE TOKEN_IDENTIFIER ( ) ;
FunctionDecl -> TOKEN_KWEXTERN TOKEN_STRING TOKEN_KWVOID TOKEN_IDENTIFIER ( ) ;
FunctionDecl -> TOKEN_KWEXTERN TOKEN_STRING TOKEN_VARTYPE TOKEN_IDENTIFIER ( ParmVarDecl ) ;
FunctionDecl -> TOKEN_KWEXTERN TOKEN_STRING TOKEN_KWVOID TOKEN_IDENTIFIER ( ParmVarDecl ) ;
FunctionDecl -> TOKEN_KWEXTERN TOKEN_VARTYPE TOKEN_IDENTIFIER ( ) ;
FunctionDecl -> TOKEN_KWEXTERN TOKEN_KWVOID TOKEN_IDENTIFIER ( ) ;
FunctionDecl -> TOKEN_KWEXTERN TOKEN_VARTYPE TOKEN_IDENTIFIER ( ParmVarDecl ) ;
FunctionDecl -> TOKEN_KWEXTERN TOKEN_KWVOID TOKEN_IDENTIFIER ( ParmVarDecl ) ;
/* StartSymbol */
S
